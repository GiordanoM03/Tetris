FUNZIONI CHE SERVONO:
- una che spinga giu i tetramini (la gravità per intenderci)  --> ho fatto la funzione per spostare il tetramino in basso di uno,
  quindi a ogni tick di gioco viene invocata e se c'è spazio sotto si sposta. 
- una che sceglie il tetramino iniziale
--> fatta, sceglie prima a random il tetramino e poi gli applica in modo random una rotazione

- parte grafica generale con la grid + menu iniziale (+ elenco comandi per gioco, punti, ...)
- funzione gameover    --> fatta


- (!)da vedere come mettere il campo di gioco centrale nello schermo e che il tetramino che viene buttato sia centrale nel campo. 

non me ne vengono in mente altre



Funzioni della classe Tetromino

1. Tetromino(TetrominoID id)
   - Costruttore della classe. Inizializza la matrice del tetromino a zero e carica il tetromino specificato dall'ID.
2. void loadTetromino(TetrominoID id)
   - Carica la forma del tetromino da un file basato sull'ID fornito.
3. int randomother()
   - Restituisce un numero casuale tra 0 e 3.
4. void rotateRight()
   - Ruota il tetromino di 90 gradi in senso orario.
5. void moveLeft()
   - Sposta il tetromino di una posizione a sinistra se possibile.
6. void moveRight()
   - Sposta il tetromino di una posizione a destra se possibile.
7. static Tetromino getRandomTetromino()
   - Genera e restituisce un tetromino con un ID casuale.
8. void applyRandomRotations()
   - Applica un numero casuale di rotazioni al tetromino.
9. bool canMoveLeft(const Grid& grid, int startRow, int startCol) const
   - Verifica se il tetromino può essere spostato a sinistra senza collisioni.
10. bool canMoveRight(const Grid& grid, int startRow, int startCol) const
    - Verifica se il tetromino può essere spostato a destra senza collisioni.
11. const int (&getShape() const)[4][4]
    - Restituisce la matrice del tetromino.

Funzioni della classe Grid

1. Grid(int rows = 23, int cols = 10)
   - Costruttore della classe. Inizializza la griglia con il numero di righe e colonne specificato e chiama la funzione clear().
2. Grid(const Grid& other)
   - Costruttore di copia. Copia le dimensioni e il contenuto della griglia dall'altro oggetto.
3. Grid& operator=(const Grid& other)
   - Copia le dimensioni e il contenuto della griglia dall'altro oggetto, evitando l'auto-assegnazione.
4. void clear()
   - Pulisce la griglia impostando tutti i valori a zero.
5. void set(int row, int col, int value)
   - Imposta un valore specifico in una posizione specifica della griglia.
6. int get(int row, int col) const
   - Restituisce il valore in una posizione specifica della griglia.
7. bool isRowFull(int row) const
   - Verifica se una riga è completamente piena.
8. void removeRow(int row)
   - Rimuove una riga piena e sposta tutte le righe sopra di essa verso il basso.
9. void shiftDown(int row)
   - Sposta tutte le righe sopra la riga specificata verso il basso.
10. void print() const
    - Stampa la griglia sulla console.
11. bool gameOver() const
    - Verifica se la partita è finita controllando se ci sono blocchi nella riga superiore.
12. bool canPlaceTetromino(const int tetromino[4][4], int startRow, int startCol) const
    - Verifica se un tetromino può essere posizionato in una specifica posizione della griglia senza collisioni.
13. void clearFullRows()
    - Pulisce tutte le righe piene nella griglia.
14. bool isCellOccupied(int row, int col) const
    - Verifica se una cella specifica nella griglia è occupata.
15. void placeTetromino(Tetris::Tetromino& tetromino, int startRow, int startCol)
    - Posiziona il tetromino sulla griglia nella posizione specificata.
16. int getColCount() const
    - Restituisce il numero di colonne della griglia.
17. bool moveTetrominoLeft(Tetris::Tetromino& tetromino, int& startRow, int& startCol)
    - Sposta il tetromino a sinistra se possibile, aggiornando la posizione iniziale.
18. bool moveTetrominoRight(Tetris::Tetromino& tetromino, int& startRow, int& startCol)
    - Sposta il tetromino a destra se possibile, aggiornando la posizione iniziale.

Funzioni della classe Timer

1. Timer(Grid& grid, Tetris::Tetromino& tetromino)
   - Costruttore. Inizializza il timer con riferimenti a una griglia e un tetromino.
2. void start()
   - Avvia il ciclo di gioco in un thread separato.
3. void gameLoop()
   - Il ciclo di gioco principale che viene eseguito ogni 0.5 secondi.